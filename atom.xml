<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ToughRADIUS 博客]]></title>
  <subtitle><![CDATA[服务中小微ISP，让运营变的更简单]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.toughradius.org/"/>
  <updated>2016-04-30T10:47:34.000Z</updated>
  <id>http://blog.toughradius.org/</id>
  
  <author>
    <name><![CDATA[toughradius.org]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ToughRADIUS V2.1.5发布]]></title>
    <link href="http://blog.toughradius.org/2016/04/30/ver215/"/>
    <id>http://blog.toughradius.org/2016/04/30/ver215/</id>
    <published>2016-04-30T10:46:18.000Z</published>
    <updated>2016-04-30T10:47:34.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V2.1.5发布。</p>
<h2 id="版本变更">版本变更</h2><ul>
<li>修复前面版本的一些bug</li>
<li>加入用户账号充值功能</li>
<li>修复强制下线的bug</li>
<li>新增用户续费API接口</li>
<li>修复mysql初始化的bug</li>
<li>修正Makefile的导致安装失败的错误</li>
<li>加入对V1版本的数据备份文件的恢复支持</li>
<li>修复删除用户信息的bug，未删除干净</li>
<li>加入订购查询的API接口</li>
<li>加入账号自动生成的API接口</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V2.1.5发布。</p>
<h2 id="版本变更">版本变更</h2><ul>
<li>修复前面版本的一些bug</li>
<li>加入用户账号充值功能</li>
<li>修复强制下线的bug</li>
<li>新增用户续费API接口</li>
]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何从ToughRADIUS V1版本迁移数据到 ToughRADIUS V2版本]]></title>
    <link href="http://blog.toughradius.org/2016/04/29/dbv1-to-dbv2/"/>
    <id>http://blog.toughradius.org/2016/04/29/dbv1-to-dbv2/</id>
    <published>2016-04-29T12:48:43.000Z</published>
    <updated>2016-04-29T12:56:58.000Z</updated>
    <content type="html"><![CDATA[<p>由于 ToughRADIUS V2版本 是一次打破兼容性的重构，数据结构并不完全兼容，因此对V1版本的数据迁移到V2版本，我们加入了特殊的数据转换支持。</p>
<h2 id="迁移步骤">迁移步骤</h2><ol>
<li>登陆 ToughRADIUS V1版本的系统管理控制台，进入到数据备份管理界面，执行数据备份，然后下载最新的备份文件。</li>
<li>修改下载的备份文件，在文件名中加入trv1四个字符，比如改名后变成 trv1_toughradius-xxxxx.gz这样的名称。</li>
<li>进入ToughRADIUS V2版本的管理控制台，进入数据备份管理功能界面，上传改了名称的备份文件。</li>
<li>对上传的备份文件执行恢复操作，即可完成数据迁移。</li>
<li>如果有多个操作员，需要对操作员重新分配权限和关联区域。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于 ToughRADIUS V2版本 是一次打破兼容性的重构，数据结构并不完全兼容，因此对V1版本的数据迁移到V2版本，我们加入了特殊的数据转换支持。</p>
<h2 id="迁移步骤">迁移步骤</h2><ol>
<li>登陆 ToughRADIUS V1版本的系统管理]]>
    </summary>
    
      <category term="toughradius" scheme="http://blog.toughradius.org/tags/toughradius/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PandaRSS 自助服务系统安装配置]]></title>
    <link href="http://blog.toughradius.org/2016/04/29/pandarss-self-service-intro/"/>
    <id>http://blog.toughradius.org/2016/04/29/pandarss-self-service-intro/</id>
    <published>2016-04-29T12:02:43.000Z</published>
    <updated>2016-04-29T12:08:46.000Z</updated>
    <content type="html"><![CDATA[<p>PandaRSS 是一个第三方开发者(pandaman)提供的基于 ToughRADIUS V2版本 API 的自助服务系统。</p>
<p>PandaRSS 为ToughRADIUS 的使用者提供了一个网上服务渠道。</p>
<h2 id="目前PandaRSS实现了以下功能：">目前PandaRSS实现了以下功能：</h2><ul>
<li>通过支付宝套餐资费在线订购开户。</li>
<li>支持已有账号登陆查看账号信息。</li>
<li>支持已有账号修改密码。</li>
<li>支持已有账号查看交易记录。</li>
</ul>
<h2 id="快速指南">快速指南</h2><h3 id="运行环境">运行环境</h3><ul>
<li>Linux </li>
<li>Python 2.7</li>
<li>pip </li>
<li>Twisted&gt;=15.0.0 可选</li>
<li>bottle&gt;=0.12.7</li>
</ul>
<h3 id="安装">安装</h3><pre><code>pip  <span class="operator"><span class="keyword">install</span> -U  https://github.com/PandaPark/PandaRSS/<span class="keyword">archive</span>/<span class="keyword">master</span>.zip

或者

pip <span class="keyword">install</span> pandarss</span>
</code></pre><h3 id="配置">配置</h3><p>新增加一个配置文件 /etc/pandarss.conf,内容如下</p>
<pre><code><span class="title">[system]</span>
<span class="setting">host = <span class="value"><span class="number">0.0</span>.<span class="number">0.0</span></span></span>
<span class="setting">port = <span class="value"><span class="number">1819</span></span></span>
<span class="setting">home_site = <span class="value">www.mydomain.com</span></span>
<span class="setting">api_url = <span class="value">http://x.x.x.x:<span class="number">1816</span>/api/v1</span></span>
<span class="setting">api_key = <span class="value">CRTCcMB7tfnXU8aXIyfavfuqruvXkNng</span></span>
<span class="setting">session_secret = <span class="value">CRTCcMB7tfnXU8aXIyfavfuqruvXkNng</span></span>
<span class="title">
[alipay]</span>
<span class="setting">alipay_key = <span class="value">jrid3242fs52234scxdzqoajmww</span></span>
<span class="setting">alipay_partner = <span class="value"><span class="number">2342342342342</span></span></span>
<span class="setting">alipay_seller_email = <span class="value">mypay@xxxx.com</span></span>
<span class="setting">alipay_return_url = <span class="value">http://www.mydomain.com/alipay/return</span></span>
<span class="setting">alipay_notify_url = <span class="value">http://www.mydomain.com/order/verify</span></span>
</code></pre><ul>
<li>api_url： 请填写部署的ToughRADIUS的服务器地址，替换ip，端口即可</li>
<li>api_key： 请填写部署的ToughRADIUS的安全密钥</li>
<li>session_secret： 一个32位的字符串，用来做cookie加密</li>
</ul>
<p>支付宝配置参数，请根据你的支付宝申请的直接到账支付提供的参数，要使用支付宝支付，服务器需要绑定域名，建议通过nginx等代理服务器实现。</p>
<h3 id="运行">运行</h3><p>输入 pandarss 会直接以非守护进程模式运行，按Ctrl+C可退出。</p>
<p>若要以守护进程模式运行，可使用nohup命令：</p>
<pre><code><span class="title">nohup</span> pandarss &amp;
</code></pre><p>默认的 pandarss  运行模式性能不高，可以使用基于twisted异步高性能网络框架来运行</p>
<pre><code><span class="title">nohup</span> pandarss_txrun &amp;
</code></pre><h3 id="绑定到ToughRADIUS服务运行">绑定到ToughRADIUS服务运行</h3><p>如果你的ToughRADIUS是以本地模式安装的，可以在ToughRADIUS的服务进程中配置pandarss进程。</p>
<p>修改 /etc/toughradius.conf, 加入以下内容</p>
<pre><code><span class="title">[program:pandarss]</span>
<span class="setting">command=<span class="value">pandarss_txrun</span></span>
<span class="setting">startretries = <span class="value"><span class="number">10</span></span></span>
<span class="setting">autorestart = <span class="value"><span class="keyword">true</span></span></span>
<span class="setting">redirect_stderr=<span class="value"><span class="keyword">true</span></span></span>
<span class="setting">stdout_logfile=<span class="value">/var/toughradius/pandarss.log</span></span>
</code></pre><p>这样pandarss可以随toughradius的进程启动停止。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>PandaRSS 是一个第三方开发者(pandaman)提供的基于 ToughRADIUS V2版本 API 的自助服务系统。</p>
<p>PandaRSS 为ToughRADIUS 的使用者提供了一个网上服务渠道。</p>
<h2 id="目前PandaRSS实现了以下]]>
    </summary>
    
      <category term="pandarss" scheme="http://blog.toughradius.org/tags/pandarss/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker 在CentOS7 中的安装配置视频教程]]></title>
    <link href="http://blog.toughradius.org/2016/04/28/docker-install-video/"/>
    <id>http://blog.toughradius.org/2016/04/28/docker-install-video/</id>
    <published>2016-04-28T07:11:19.000Z</published>
    <updated>2016-04-28T07:13:36.000Z</updated>
    <content type="html"><![CDATA[<p>Docker 在CentOS7 中的安装配置视频教程以及Docker-compose工具的安装</p>
<iframe height="498" width="720" src="http://player.youku.com/embed/XMTU1MDk2NzA1Ng==" frameborder="0" allowfullscreen></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>Docker 在CentOS7 中的安装配置视频教程以及Docker-compose工具的安装</p>
<iframe height="498" width="720" src="http://player.youku.com/embed/XMTU1MDk2NzA1Ng==]]>
    </summary>
    
      <category term="docker" scheme="http://blog.toughradius.org/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS (本地模式)安装配置视频教程]]></title>
    <link href="http://blog.toughradius.org/2016/04/28/toughradius-native-install-video/"/>
    <id>http://blog.toughradius.org/2016/04/28/toughradius-native-install-video/</id>
    <published>2016-04-28T01:34:49.000Z</published>
    <updated>2016-04-28T07:13:42.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS (本地模式)安装配置视频教程, 对ToughRADIUS的安装流程有详细的讲解。</p>
<iframe height="498" width="720" src="http://player.youku.com/embed/XMTU0OTk2OTk4NA==" frameborder="0" allowfullscreen></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS (本地模式)安装配置视频教程, 对ToughRADIUS的安装流程有详细的讲解。</p>
<iframe height="498" width="720" src="http://player.youku.com/embed/XMTU0OTk2OTk]]>
    </summary>
    
      <category term="toughradius" scheme="http://blog.toughradius.org/tags/toughradius/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V2.1.0 正式版发布，全新里程碑]]></title>
    <link href="http://blog.toughradius.org/2016/04/26/ver210/"/>
    <id>http://blog.toughradius.org/2016/04/26/ver210/</id>
    <published>2016-04-26T14:26:05.000Z</published>
    <updated>2016-04-26T14:27:42.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V2.1.0 正式版发布，全新里程碑</p>
<p>这是自V1.2版本以后完全重构的全新版本，该版本完成了一期 API 的设计，修复前面版本的一些 bug。并大大提升性能。并且引入了全新的安装部署方式。</p>
<h2 id="版本变更">版本变更</h2><ul>
<li>完成一期规划的 API 接口。</li>
<li>将数据库缓存与 session 管理替换为 redis。</li>
<li>支持非 docker 模式的安装部署。</li>
<li>优化 docker 构建。</li>
<li>增加自有资费。</li>
<li>修复大量 bug。</li>
<li>改进系统性能。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V2.1.0 正式版发布，全新里程碑</p>
<p>这是自V1.2版本以后完全重构的全新版本，该版本完成了一期 API 的设计，修复前面版本的一些 bug。并大大提升性能。并且引入了全新的安装部署方式。</p>
<h2 id="版本变更">版本变更<]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V2.0.5 发布]]></title>
    <link href="http://blog.toughradius.org/2016/03/09/ver205/"/>
    <id>http://blog.toughradius.org/2016/03/09/ver205/</id>
    <published>2016-03-09T07:47:58.000Z</published>
    <updated>2016-03-09T07:55:36.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V2.0.5 发布。</p>
<p>该版本对API进行了完善调整，后续版本会继续完善API。同时会组件改进客户技术支持方面，该版本已经支持用户反馈，提交反馈操作将会提交当前ToughRADIUS的版本信息以及部分日志信息到 toughstruct.com，如果你填写了有效的电子邮件地址，toughstruct.com 可能会就您的反馈报告与您联系，您提交的日志信息都将按照 toughstruct.com 的隐私政策受到保护，提交该反馈表示您同意 toughstruct.com 使用您提交的信息来改进 ToughRADIUS 的产品与服务。</p>
<h2 id="版本更新">版本更新</h2><ul>
<li>更新API，增加结果码状态定义。</li>
<li>新增系统日志查询功能。</li>
<li>新增用户反馈功能，支持在线提交反馈。</li>
<li>新增客户授权码管理配置功能。</li>
<li>新增加了一个“关于”信息页面。</li>
</ul>
<h2 id="关于升级">关于升级</h2><p>数据结构未改变，但有配置选项增加，建议重新安装实例。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V2.0.5 发布。</p>
<p>该版本对API进行了完善调整，后续版本会继续完善API。同时会组件改进客户技术支持方面，该版本已经支持用户反馈，提交反馈操作将会提交当前ToughRADIUS的版本信息以及部分日志信息到 toughstruct.c]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS API v1 发布]]></title>
    <link href="http://blog.toughradius.org/2016/03/03/apiv1-release/"/>
    <id>http://blog.toughradius.org/2016/03/03/apiv1-release/</id>
    <published>2016-03-03T04:18:51.000Z</published>
    <updated>2016-03-03T04:24:33.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS API v1 发布了。</p>
<p>ToughRADIUS API要解决的三个问题：</p>
<ul>
<li><p><strong>业务功能扩展</strong>：ToughRADIUS V2版本提供了一个精简的管理系统，但是对于一些客户比较复杂的业务需求会显得不够用，利用API可以实现业务功能的扩展，通过已有CRM等管理系统与ToughRADIUS实现对接。</p>
</li>
<li><p><strong>自助服务系统定制</strong>：ToughRADIUS V2版本移除了自助服务模块，我们希望把这个模块提供給第三方来实现。</p>
</li>
<li><p><strong> 移动终端APP开发</strong>：对于ToughRADIUS V2版本，无论是管理，自服务都是可以扩展到移动终端的，通过API可以支持IOS，Android，微信公众号开发扩展。</p>
</li>
</ul>
<h2 id="协议说明">协议说明</h2><ul>
<li>协议采用基于http的接口调用方式。</li>
<li>消息发起方：第三方系统。</li>
<li>消息接受方：TOUGHRADIUS系统。</li>
<li>接口请求方法：HTTP GET 或者 POST，支持标准http1.1协议。</li>
<li>消息报文编码：UTF-8，注意对参数进行 urlencode 编码</li>
<li>接口鉴权：MD5签名，<code>md5(共享密钥+排序的参数值组合字符串)</code>,签名校验是双向的，消息接收方对请求消息进行签名验证，同时需对结果进行签名返回，消息发起方对响应结果的签名进行验证。</li>
<li>当前接口版本：v1</li>
</ul>
<p>完整文档请访问：<a href="http://docs.toughradius.net/toughradius_v2/api_docs.html" target="_blank" rel="external">《ToughRADIUS 接口文档》</a></p>
<p>随着ToughRADIUS版本的更新完善，API接口内容也会持续完善。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS API v1 发布了。</p>
<p>ToughRADIUS API要解决的三个问题：</p>
<ul>
<li><p><strong>业务功能扩展</strong>：ToughRADIUS V2版本提供了一个精简的管理系统，但是对于一些客户比较复杂]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V2.0.2 发布]]></title>
    <link href="http://blog.toughradius.org/2016/02/19/ver202/"/>
    <id>http://blog.toughradius.org/2016/02/19/ver202/</id>
    <published>2016-02-19T06:53:32.000Z</published>
    <updated>2016-02-19T06:56:15.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V2.0.2 发布。</p>
<p>ToughRADIUS V2.x版本并不是 V1.x版本的简单延续，而是一次完全重构，一次打破兼容性的重构。</p>
<p>在保留核心功能的基础上，砍掉了大部分可有可无的功能，比如砍掉自助服务模块是一个非常大的动作。</p>
<p>在技术框架上进行了完全的重写，并采用pypy这个更快的基础支撑平台，对V1.x版本进行了大刀阔斧的改造，对安装配置操作进行了精简和优化。</p>
<p>相关文档请参考：<a href="http://doc.toughradius.net" target="_blank" rel="external">http://doc.toughradius.net</a></p>
<h2 id="版本变更说明：">版本变更说明：</h2><ul>
<li>移除了独立的系统控制管理子系统，部分功能合并到主管理系统。</li>
<li>移除了自助服务子系统。</li>
<li>新增API模块，提供第三方通过API来实现自助服务，扩展管理的能力。</li>
<li>移除客户经理管理模块。</li>
<li>移除黑白名单管理模块。</li>
<li>移除充值卡管理模块。</li>
<li>移除工单管理模块。</li>
<li>暂时移除了用户消息跟踪模块。</li>
<li>修复了一些bug。</li>
<li>系统监听的端口现在只有3个必须的：1816，1812，1813，其他的全部移除。</li>
</ul>
<h2 id="V2-x_版本路线">V2.x 版本路线</h2><ul>
<li>完善一个精简稳定的版本。</li>
<li>完善API，扩展第三方模块实现。</li>
</ul>
<h2 id="温馨提示">温馨提示</h2><ul>
<li>目前还不建议ToughRADIUS V2 版本投入生产环境使用。</li>
<li>如果已经在生产环境使用的ToughRADIUS V1 版本够用，不用着急升级版本。</li>
<li>V2.x的安装配置操作相比V1.x版本发生了很大变换，更加精简，但需要适应。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V2.0.2 发布。</p>
<p>ToughRADIUS V2.x版本并不是 V1.x版本的简单延续，而是一次完全重构，一次打破兼容性的重构。</p>
<p>在保留核心功能的基础上，砍掉了大部分可有可无的功能，比如砍掉自助服务模块是一个非常大的动作]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughMySQL，为ToughRADIUS提供数据库双机热备支持]]></title>
    <link href="http://blog.toughradius.org/2016/02/04/toughmysql-v0-0-1/"/>
    <id>http://blog.toughradius.org/2016/02/04/toughmysql-v0-0-1/</id>
    <published>2016-02-03T18:39:38.000Z</published>
    <updated>2016-02-03T18:41:45.000Z</updated>
    <content type="html"><![CDATA[<p>ToughMySQL是一个基于Docker技术的MySQL应用，一开始它就是为了ToughRADIUS提供一个简单可靠易用的数据库服务。</p>
<p>现在 ToughMySQL发布了第一个正式的版本 v0.0.1</p>
<h2 id="功能特性：">功能特性：</h2><ul>
<li>实现MySQL Docker容器部署。</li>
<li>提供针对不同服务器配置环境的优化配置。</li>
<li>提供一键脚本快速安装。</li>
<li>提供备份脚本，支持7天以上备份自动删除。</li>
<li>提供主从，互为主备的快速配置。</li>
</ul>
<h2 id="快速指南">快速指南</h2><p>tmshell是一个自动化安装和管理脚本，通过这个脚本，提供了很多有用的管理功能</p>
<pre><code><span class="variable">$ </span>wget <span class="symbol">https:</span>/<span class="regexp">/github.com/talkincode</span><span class="regexp">/toughmysql/raw</span><span class="regexp">/master/tmshell</span> -<span class="constant">O</span> /usr/local/bin/tmshell
<span class="variable">$ </span>chmod +x /usr/local/bin/tmshell
<span class="variable">$ </span>tmshell install
</code></pre><p>直接输入 tmshell 可以看到支持的指令操作</p>
<pre><code>usage: tmshell <span class="keyword">[</span>OPTIONS]<span class="instruction"> instance
</span>
    docker_setup                install docker, docker-compose
    pull                        mysql docker images pull
    install                     install default mysql<span class="instruction"> instance
</span>    remove                      uninstall mysql<span class="instruction"> instance
</span>    config                      mysql<span class="instruction"> instance </span>config edit
    status                      mysql<span class="instruction"> instance </span>status
    restart                     mysql<span class="instruction"> instance </span>restart
    stop                        mysql<span class="instruction"> instance </span>stop
    logs                        mysql<span class="instruction"> instance </span>logs
    showmaster                  mysql<span class="instruction"> instance </span>show master status
    showslave                   mysql<span class="instruction"> instance </span>show slave status
    upmaster                    mysql<span class="instruction"> instance </span>update master sync config
    backup                      mysql<span class="instruction"> instance </span>backup database
    dsh                         mysql<span class="instruction"> instance </span>bash term

All other options are passed to the tmshell program.
</code></pre><h3 id="完整的安装过程">完整的安装过程</h3><p>安装过程是一个交互式的过程，根据实际情况修改具体参数，注意如果打算以热备模式部署，需要输入server id</p>
<pre><code>[root@i-jahnm3dt ~]# tmshell <span class="operator"><span class="keyword">install</span>
mysql <span class="keyword">user</span> [raduser]:
mysql <span class="keyword">user</span> <span class="keyword">password</span> [radpwd]:
mysql <span class="keyword">database</span> [radiusd]:
mysql root <span class="keyword">password</span> [<span class="keyword">none</span>]:
mysql <span class="keyword">replication</span> <span class="keyword">password</span> [<span class="keyword">replication</span>]:
mysql port [<span class="number">3306</span>]:
mysql <span class="keyword">server</span> <span class="keyword">id</span> [<span class="number">1</span>,<span class="number">2.</span>..](<span class="keyword">default</span> <span class="keyword">none</span>): <span class="number">1</span>
mysql <span class="keyword">max</span> memary [<span class="number">512</span><span class="keyword">M</span>,<span class="number">1</span><span class="keyword">G</span>,<span class="number">4</span><span class="keyword">G</span>](<span class="keyword">default</span> <span class="keyword">none</span>):

ToughMySQL <span class="keyword">instance</span> config:

<span class="keyword">instance</span> <span class="keyword">name</span>: mysql
mysql_user: raduser
mysql_password: radpwd
mysql_database: radiusd
mysql_root_password:
mysql_repl_password: <span class="keyword">replication</span>
mysql_port: <span class="number">3306</span>
serverid: <span class="number">1</span>
mysql_max_mem:


<span class="keyword">database</span>:
    container_name: db_mysql
    image: <span class="string">"index.alauda.cn/toughstruct/mysql"</span>
    privileged: <span class="literal">true</span>
    ports:
        -<span class="string">"3306:3306"</span>
    ulimits:
        nproc: <span class="number">65535</span>
        nofile:
            soft: <span class="number">20000</span>
            hard: <span class="number">40000</span>
        environment:
            - SERVERID=<span class="number">1</span>
            - MYSQL_MAX_MEM=
            - MYSQL_USER=raduser
            - MYSQL_PASSWORD=radpwd
            - MYSQL_DATABASE=radiusd
            - MYSQL_ROOT_PASSWORD=
            - MYSQL_REPL_PASSWORD=<span class="keyword">replication</span>
    restart: <span class="keyword">always</span>
    volumes:
        /home/toughrun/mysql/dbmysql:/<span class="keyword">var</span>/lib/mysql
        /home/toughrun/mysql/<span class="keyword">backup</span>:/<span class="keyword">var</span>/<span class="keyword">backup</span>

Creating db_mysql
  <span class="keyword">Name</span>          Command         State           Ports
<span class="comment">----------------------------------------------------------</span>
db_mysql   /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/run   Up      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp</span>
</code></pre><p>在另一台服务器上按同样的步骤部署mysql实例，注意server id必须不一样</p>
<blockquote>
<p>具体过程略</p>
</blockquote>
<p>查看每一个实例的 master status </p>
<p>服务器1：</p>
<pre><code>[root<span class="comment">@i-jahnm3dt ~]# tmshell showmaster</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 1. row <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
File: mysql-bin.000002
Position: 107
Binlog_Do_DB:
Binlog_Ignore_DB: test,mysql
hosts:
172.17.0.1
10.61.105.29
</code></pre><p>服务器2：</p>
<pre><code>[root<span class="comment">@i-jahnm3et ~]# tmshell showmaster</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 1. row <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
File: mysql-bin.000002
Position: 107
Binlog_Do_DB:
Binlog_Ignore_DB: test,mysql
hosts:
172.17.0.1
10.60.128.105
</code></pre><p>在服务器1上执行：</p>
<pre><code>[root@i-jahnm3dt ~]<span class="preprocessor"># tmshell upmaster</span>
MASTER_HOST: <span class="number">10.60</span><span class="number">.128</span><span class="number">.105</span>
MASTER_PORT (<span class="number">3306</span>): 
MASTER_REPL_PASSWORD (replication):
MASTER_LOG_FILE: mysql-bin<span class="number">.000002</span>
MASTER_LOG_POS: <span class="number">107</span>
</code></pre><p>在服务器2上执行：</p>
<pre><code>[root@i-jahnm3et ~]<span class="preprocessor"># tmshell upmaster</span>
MASTER_HOST: <span class="number">10.61</span><span class="number">.105</span><span class="number">.29</span>
MASTER_PORT (<span class="number">3306</span>): 
MASTER_REPL_PASSWORD (replication):
MASTER_LOG_FILE: mysql-bin<span class="number">.000002</span>
MASTER_LOG_POS: <span class="number">107</span>
</code></pre><p>最后检查每个服务器上的slave状态：</p>
<pre><code>root<span class="comment">@i-jahnm3dt ~]# tmshell showslave</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 1. row <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
  Slave_IO_State: Waiting for master to send event
  Master_Host: 10.60.128.105
  Master_User: repl
  Master_Port: 3306
  Connect_Retry: 60
  Master_Log_File: mysql-bin.000002
  Read_Master_Log_Pos: 107
  Relay_Log_File: mysqld-relay-bin.000002
  Relay_Log_Pos: 253
  Relay_Master_Log_File: mysql-bin.000002
  Slave_IO_Running: Yes
  Slave_SQL_Running: Yes
</code></pre><p>如果以下两项显示为：</p>
<pre><code><span class="attribute">Slave_IO_Running</span>: <span class="string">Yes</span>
<span class="attribute">Slave_SQL_Running</span>: <span class="string">Yes</span>
</code></pre><p>说明我们的mysql互为主备的配置成功了。现在我们的两个MySQL节点都可以提供服务了，并且实时热备。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughMySQL是一个基于Docker技术的MySQL应用，一开始它就是为了ToughRADIUS提供一个简单可靠易用的数据库服务。</p>
<p>现在 ToughMySQL发布了第一个正式的版本 v0.0.1</p>
<h2 id="功能特性：">功能特性：</h2>]]>
    </summary>
    
      <category term="docker" scheme="http://blog.toughradius.org/tags/docker/"/>
    
      <category term="mysql" scheme="http://blog.toughradius.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过Docker镜像为ToughRADIUS部署Mysql]]></title>
    <link href="http://blog.toughradius.org/2015/10/21/docker-mysql-create/"/>
    <id>http://blog.toughradius.org/2015/10/21/docker-mysql-create/</id>
    <published>2015-10-21T15:47:26.000Z</published>
    <updated>2016-02-03T19:05:30.000Z</updated>
    <content type="html"><![CDATA[<p>注意：本文提到的方法已经不适用于最新的版本，请参考最新的<a href="http://blog.toughradius.org/2016/02/04/toughmysql-v0-0-1/">ToughMySQL实现：</a></p>
<p>ToughRADIUS默认采用了SQLite存储数据，通常这足够运营上千的用户量了，不过当系统对数据的可管理性，系统的性能有更高的要求时，我们建议采用MySQL数据库来替换。</p>
<p>最近不少朋友反应数据库出现锁死的状况，主要是由于并发过高，SQLite采用的文件锁导致了其他数据库事务失败。</p>
<p>在ToughRADIUS发布的Docker镜像中，已经内置了MySQL的驱动，因此我们要做的仅仅是对数据库的配置。</p>
<p>强烈推荐使用Docker镜像来部署Mysql，更加简单方便。</p>
<p>最好采用主机文件映射的方式来管理数据文件，这里创建一个文件夹来存放mysql数据文件</p>
<pre><code><span class="variable">$ </span>mkdir -p /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>  </span>
</code></pre><p>创建一个Mysql容器实例并自动创建一个数据库</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-mysql
</code></pre><p>你还可以选择优化配置的Docker镜像,下面是创建一个支持4G以上内存，CPU 4核以上的配置，加上标签M4即可</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-<span class="symbol">mysql:</span><span class="constant">M4</span>
</code></pre><p>另外还提供了一个支持内存1G的配置，使用标签M1即可</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-<span class="symbol">mysql:</span><span class="constant">M1</span>
</code></pre><blockquote>
<p>  <code>MYSQL_ROOT_PASSWORD</code>: root用户密码<br>  <code>MYSQL_DATABASE</code>: 自动创建一个数据库<br>  <code>MYSQL_USER</code>: 随数据库创建一个用户<br>  <code>MYSQL_PASSWORD</code>: 新建用户的密码</p>
</blockquote>
<h3 id="备份数据库">备份数据库</h3><p>如果是首次安装，可略过，如果是迁移数据库，则务必进行备份。</p>
<h3 id="创建数据库">创建数据库</h3><p>通过MySQL客户端执行以下语句，请自行修改相关用户密码信息。如果已经使用Docker镜像自动创建数据库，则忽略。</p>
<pre><code><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> toughradius <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span> 
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> toughradius.* <span class="keyword">TO</span> tradmin@‘%<span class="string">' IDENTIFIED BY ‘trradiusd'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span> 
<span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span> 
</code></pre><h3 id="配置ToughRADIUS">配置ToughRADIUS</h3><p>进入ToughRADIUS的系统管理控制台，打开数据库配置界面。设置MySQl数据库类型，并填写mysql数据库连接描述。注意数据库名称，用户名，密码对应。</p>
<pre><code><span class="label">mysql:</span>//tradmin:trradiusd<span class="localvars">@192</span><span class="number">.168</span><span class="number">.1</span><span class="number">.10</span>/toughradius?charset=utf8
</code></pre><p><img src="https://cloud.githubusercontent.com/assets/377938/10863358/b4e30a14-8005-11e5-8e06-b4ff066842d1.png" alt="mysql config"></p>
<h3 id="初始化MySQL数据库">初始化MySQL数据库</h3><p>完成创建和配置后，进入下一步的初始化过程，首先进入控制面板，重启所有服务，以保证所有服务都能加载最新配置。</p>
<p>点击初始化数据库按钮，完成数据库的初始化。</p>
<h3 id="恢复数据">恢复数据</h3><p>进入数据备份管理界面，恢复之前备份的数据，如果是首次安装则可忽略。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>注意：本文提到的方法已经不适用于最新的版本，请参考最新的<a href="http://blog.toughradius.org/2016/02/04/toughmysql-v0-0-1/">ToughMySQL实现：</a></p>
<p>ToughRADIUS默认采用了]]>
    </summary>
    
      <category term="docker" scheme="http://blog.toughradius.org/tags/docker/"/>
    
      <category term="mysql" scheme="http://blog.toughradius.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux PPTP 对接 ToughRADIUS]]></title>
    <link href="http://blog.toughradius.org/2015/10/19/linux-pptpd-to-toughradius/"/>
    <id>http://blog.toughradius.org/2015/10/19/linux-pptpd-to-toughradius/</id>
    <published>2015-10-19T02:25:32.000Z</published>
    <updated>2015-10-19T02:29:01.000Z</updated>
    <content type="html"><![CDATA[<p>以 ubuntu14 为例，谈谈PPTP对接ToughRADIUS</p>
<h3 id="安装pptpd服务">安装pptpd服务</h3><pre><code>sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> -y
sudo apt-<span class="built_in">get</span> install -y pptpd iptables libfreeradius-client2 libfreeradius-client-<span class="built_in">dev</span>
</code></pre><p>如果/etc/radiusclient目录不存在，建立一个radius配置目录链接 </p>
<pre><code>ln -s <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>radiusclient <span class="regexp">/etc/</span>radiusclient
</code></pre><h3 id="配置pptpd与radius">配置pptpd与radius</h3><p>修改配置文件 /etc/pptpd.conf</p>
<pre><code>option /etc/ppp/pptpd-options
<span class="hexcolor">#deb</span>ug
<span class="id">#stimeout</span> <span class="number">10</span>
logwtmp
<span class="id">#bcrelay</span> eth1
<span class="id">#delegate</span>
<span class="id">#connections</span> <span class="number">100</span>
localip <span class="number">10.79</span>.<span class="number">97.1</span>
remoteip <span class="number">10.79</span>.<span class="number">97.10</span>-<span class="number">200</span>
</code></pre><p>修改配置文件 /etc/ppp/pptpd-options，注意这里采用了maschapv2认证方式，并采用mppe128位加密模式。</p>
<pre><code>name pptpd
refuse-pap
refuse-chap
refuse-mschap
<span class="keyword">require</span>-mschap-v2
<span class="keyword">require</span>-mppe-<span class="number">128</span>

<span class="comment"># Network and Routing</span>
ms-dns <span class="number">8.8</span>.<span class="number">8.8</span>
ms-dns <span class="number">8.8</span>.<span class="number">4.4</span>
proxyarp
nodefaultroute

<span class="comment">#Logging</span>
<span class="comment">#debug</span>
<span class="comment">#dump</span>
<span class="comment">#logfile /var/log/pptpd.log</span>

<span class="comment"># Miscellaneous</span>
lock
nobsdcomp
novj
novjccomp
<span class="comment">#nologfd</span>

plugin /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">pppd</span>/2.4.5/<span class="title">radius</span>.<span class="title">so</span></span>
plugin /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">pppd</span>/2.4.5/<span class="title">radattr</span>.<span class="title">so</span></span>
radius-config-file /etc/radiusclient/radiusclient.conf
</code></pre><p>配置/etc/radiusclient/radiusclient.conf , 注意配置authserver，acctserver为你实际的radius服务器地址和端口。</p>
<pre><code>auth_order radius
login_tries <span class="number">4</span>
login_timeout <span class="number">60</span>
nologin <span class="regexp">/etc/</span>nologin
authserver radius.toughctruc.<span class="string">net:</span><span class="number">1812</span>
acctserver radius.toughctruc.<span class="string">net:</span><span class="number">1813</span>
servers <span class="regexp">/etc/</span>radiusclient/servers
dictionary <span class="regexp">/etc/</span>radiusclient/dictionary
seqfile <span class="regexp">/var/</span>run/radius.seq
mapfile <span class="regexp">/etc/</span>radiusclient/port-id-map
default_realm
radius_timeout <span class="number">10</span>
radius_retries <span class="number">3</span>
login_local <span class="regexp">/bin/</span>login
</code></pre><p>如果 /etc/radiusclient/port-id-map 不存在，建立一个空文件</p>
<pre><code><span class="title">echo</span> <span class="string">""</span> &gt; /etc/radiusclient/<span class="foreign"><span class="keyword">port</span>-id-map</span>
</code></pre><p>配置radius服务器和共享密钥 /etc/radiusclient/servers</p>
<pre><code>radius<span class="class">.toughstruct</span><span class="class">.net</span>     testing123
</code></pre><p>为了支持mschapv2认证，需要加入 dictionary.microsoft字典， 修改字典文件 /etc/radiusclient/dictionary，在末尾务必加上 ：</p>
<pre><code><span class="keyword">INCLUDE</span> <span class="regexp">/etc/</span>radiusclient<span class="regexp">/dictionary.microsoft</span>
</code></pre><p>如果目录中没有这个字典，可以下载：<a href="https://raw.githubusercontent.com/talkincode/ToughVPN/master/radius/dictionary/dictionary.microsoft" target="_blank" rel="external">https://raw.githubusercontent.com/talkincode/ToughVPN/master/radius/dictionary/dictionary.microsoft</a></p>
<h3 id="修改防火墙配置并修改内核转发支持">修改防火墙配置并修改内核转发支持</h3><p>注意IP地址与/etc/pptpd.conf中配置的一致</p>
<pre><code>iptables -t nat -A POSTROUTING -s <span class="number">10.79</span><span class="number">.97</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE
iptables -A FORWARD -s <span class="number">10.79</span><span class="number">.97</span><span class="number">.0</span>/<span class="number">24</span> -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j TCPMSS --<span class="built_in">set</span>-mss <span class="number">1356</span>
</code></pre><p>设置内核转发支持</p>
<pre><code>sysctl -w net<span class="class">.ipv4</span><span class="class">.ip_forward</span>=<span class="number">1</span>
</code></pre><p>启动pptpd服务</p>
<pre><code>service pptpd <span class="built_in">start</span> 
</code></pre><h3 id="配置ToughRADIUS">配置ToughRADIUS</h3><p>在ToughRADIUS系统中，需要把PPTP作为接入设备加入，在BAS信息管理里增加一个标准配置即可。</p>
<p>增加资费，新增用户信息，接下来就可以进行拨号测试了。</p>
<p>在拨号过程中，可以通过用户消息跟踪或系统日志查看进行调试，使用mschapv2认证时，用户消息必定会有两个特定属性：MS-CHAP-Challenge 和 MS-CHAP2-Response，如果用户消息中没有此属性，则可能的原因是：</p>
<ul>
<li>pptp服务没有配置require-mschap-v2  和 require-mppe-128</li>
<li>系统内核不支持mppe</li>
<li>没有加入dictionary.microsoft</li>
<li>如果没有上面的问题，试着修改 require-mppe-128 为 require-mppe</li>
</ul>
<h3 id="注意事项">注意事项</h3><p>要支持mschapv2，需要系统内核支持MPPE，输入指令：</p>
<pre><code>modprobe ppp-compress-<span class="number">18</span> &amp;&amp; <span class="built_in">echo</span> ok
</code></pre><p>如果输出ok，则系统内核支持。</p>
<p>在测试过程中，可以开启debug收集日志进行诊断，以及配合Radius服务器的日志进行诊断。</p>
<p>更多帮助，请参考 <a href="http://poptop.sourceforge.net/dox/" target="_blank" rel="external">http://poptop.sourceforge.net/dox/</a></p>
<p>另外，你也可以关注我们的这个开源项目：<a href="https://github.com/talkincode/ToughVPN" target="_blank" rel="external">https://github.com/talkincode/ToughVPN  </a>  ，这个项目计划实现更简单的一键安装以及常识Docker模式的部署。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以 ubuntu14 为例，谈谈PPTP对接ToughRADIUS</p>
<h3 id="安装pptpd服务">安装pptpd服务</h3><pre><code>sudo apt-<span class="built_in">get</span> <span class=]]>
    </summary>
    
      <category term="pptpd" scheme="http://blog.toughradius.org/tags/pptpd/"/>
    
      <category term="vpn" scheme="http://blog.toughradius.org/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V1.2.0.2 发布]]></title>
    <link href="http://blog.toughradius.org/2015/10/17/ver1202/"/>
    <id>http://blog.toughradius.org/2015/10/17/ver1202/</id>
    <published>2015-10-17T07:22:51.000Z</published>
    <updated>2015-10-17T07:28:14.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V1.2.0.2 发布。</p>
<h2 id="版本变更说明：">版本变更说明：</h2><ul>
<li>修复了系统创建后，用户密码认证失效，全部放行的bug。</li>
<li>修复了无法使用mschapv2认证的错误，支持mppe128位加密。</li>
<li>删除了mschapv1的支持。</li>
</ul>
<h2 id="升级指南">升级指南</h2><p>可在系统控制管理界面里直接升级稳定版，无数据库结构变动，但建议还是要备份数据。</p>
<p>如果界面升级失败，可在主机终端用以下指令升级：</p>
<pre><code>docker <span class="built_in">exec</span> trserver sh -c <span class="string">"cd /opt/toughradius &amp;&amp; git checkout stable &amp;&amp; git pull origin stable &amp;&amp; supervisorctl restart all"</span>
</code></pre><blockquote>
<p>注意 trserver是容器的名称，请该做你部署的容器名称。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V1.2.0.2 发布。</p>
<h2 id="版本变更说明：">版本变更说明：</h2><ul>
<li>修复了系统创建后，用户密码认证失效，全部放行的bug。</li>
<li>修复了无法使用mschapv2认证的错误，支持mppe128位加密]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mschapv2在Radius中的认证实现]]></title>
    <link href="http://blog.toughradius.org/2015/10/17/mschapv2/"/>
    <id>http://blog.toughradius.org/2015/10/17/mschapv2/</id>
    <published>2015-10-16T16:44:31.000Z</published>
    <updated>2015-10-16T16:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>在Radius的认证请求AccessRequest包中如果包含 MS-CHAP2-Response 和 MS-CHAP-Challenge 属性则意味着需要实现ms-chap-v2认证。</p>
<h2 id="客户端_MS-CHAP2-Response_和_MS-CHAP-Challenge_生成的规则">客户端 MS-CHAP2-Response 和 MS-CHAP-Challenge 生成的规则</h2><h3 id="MS-CHAP-Challenge">MS-CHAP-Challenge</h3><p>MS-CHAP-Challenge  (AuthChallenge) 是客户端生成的随机16字节。</p>
<h3 id="MS-CHAP2-Response">MS-CHAP2-Response</h3><p>随机生成16字节属性 PeerChallenge，连同AuthChallenge，UserName，Password作为输入参数，调用方法 GenerateNTResponse 得到 NtResponse.</p>
<pre><code><span class="function"><span class="title">GenerateNTResponse</span><span class="params">(AuthChallenge, PeerChallenge, UserName, Password)</span></span> 
</code></pre><p>GenerateNTResponse 方法的实现参考 <a href="http://tools.ietf.org/html/rfc2759.html#section-8.1" target="_blank" rel="external">http://tools.ietf.org/html/rfc2759.html#section-8.1</a></p>
<p>封装50字节的 MS-CHAP2-Response 属性：</p>
<pre><code><span class="special">[</span>0 : 2<span class="special">]</span>           Flags  <span class="command">\x</span>00<span class="command">\x</span>00
<span class="special">[</span>2 : 18<span class="special">]</span>          PeerChallenge 
<span class="special">[</span>18 : 26<span class="special">]</span>         Reserved <span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00
<span class="special">[</span>26 : 50<span class="special">]</span>         NtResponse
</code></pre><h2 id="服务端认证规则">服务端认证规则</h2><p>校验 MS-CHAP2-Response 长度，长度不等于50应该丢弃，并发送拒绝认证。</p>
<p>从 MS-CHAP2-Response 提取 PeerChallenge，NtResponse</p>
<pre><code>NtResponse = MS-CHAP2-Response[<span class="number">26</span> : <span class="number">50</span>]
PeerChallenge = MS-CHAP2-Response[<span class="number">2</span> : <span class="number">18</span>]
</code></pre><p>调用 GenerateNTResponse 方法得到 MyNtResponse</p>
<pre><code><span class="function"><span class="title">GenerateNTResponse</span><span class="params">(AuthChallenge, PeerChallenge, UserName, Password)</span></span>  
</code></pre><p>比较 MyNtResponse 与 NtResponse，不相等则验证失败。</p>
<h2 id="Radius_认证响应">Radius 认证响应</h2><p>调用 GenerateAuthenticatorResponse 方法得到 AuthenticatorResponse</p>
<pre><code>GenerateAuthenticatorResponse<span class="list">(
    <span class="keyword">Password</span>,
    NtResponse,
    PeerChallenge, 
    AuthChallenge
    UserName
)</span> 
</code></pre><p>GenerateAuthenticatorResponse 方法的实现参考 <a href="http://tools.ietf.org/html/rfc2759.html#section-8.7" target="_blank" rel="external">http://tools.ietf.org/html/rfc2759.html#section-8.7</a></p>
<p>设置Radius响应消息属性  MS-CHAP2-Success  =  AuthenticatorResponse</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Radius的认证请求AccessRequest包中如果包含 MS-CHAP2-Response 和 MS-CHAP-Challenge 属性则意味着需要实现ms-chap-v2认证。</p>
<h2 id="客户端_MS-CHAP2-Response_和_MS-CHAP]]>
    </summary>
    
      <category term="radius" scheme="http://blog.toughradius.org/tags/radius/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V1.2.0.1 发布]]></title>
    <link href="http://blog.toughradius.org/2015/10/13/ver1201/"/>
    <id>http://blog.toughradius.org/2015/10/13/ver1201/</id>
    <published>2015-10-13T06:54:34.000Z</published>
    <updated>2015-10-15T06:58:01.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V1.2.0.1 发布，该版本没有数据库部分升级，在ToughRADIUS的控制面板，选择升级稳定版就可以切换了。</p>
<h1 id="版本变更说明：">版本变更说明：</h1><ul>
<li>不再发布为Python标准安装包，ToughRADIUS在发布上将主要采用Docker镜像打包模式，这让我们更专注的解决问题，而不是制造各种问题。</li>
<li>在发送强制下线消息时有一个打印日志的BUG被修复。</li>
<li>清理了一些无用的逻辑代码。</li>
<li>用户状态的改进，查询时根据用户过期日期查询，在显示时做额外的判断，修正了用户已过期还显示为正常的错误。</li>
<li>充值卡续费的BUG修复。</li>
<li>发送邮件模块的BUG修复。</li>
<li>操作员cookie过期导致退出链接出错的BUG修复。</li>
<li>更新Dockerfile构建脚本。</li>
</ul>
<p>感谢大家一如既往的支持，有问题请及时反馈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V1.2.0.1 发布，该版本没有数据库部分升级，在ToughRADIUS的控制面板，选择升级稳定版就可以切换了。</p>
<h1 id="版本变更说明：">版本变更说明：</h1><ul>
<li>不再发布为Python标准安装包，ToughRAD]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务中小微ISP，让运营变的更简单。]]></title>
    <link href="http://blog.toughradius.org/2015/10/07/intro/"/>
    <id>http://blog.toughradius.org/2015/10/07/intro/</id>
    <published>2015-10-07T07:59:45.000Z</published>
    <updated>2015-10-07T08:28:38.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS是一个AAA应用软件，从创立之日起，他的宗旨就是服务于中小微ISP，让运营变得更简单。</p>
<p>ToughRADIUS支持标准RADIUS协议（RFC 2865, RFC 2866），提供完整的AAA实现。支持灵活的策略管理，支持各种主流接入设备并轻松扩展，具备丰富的计费策略支持。 </p>
<p>ToughRADIUS支持使用Oracle, MySQL, PostgreSQL, MSSQL等主流数据库存储用户数据，支持数据缓存，提供高性能的支持。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS是一个AAA应用软件，从创立之日起，他的宗旨就是服务于中小微ISP，让运营变得更简单。</p>
<p>ToughRADIUS支持标准RADIUS协议（RFC 2865, RFC 2866），提供完整的AAA实现。支持灵活的策略管理，支持各种主流接入设备]]>
    </summary>
    
  </entry>
  
</feed>
