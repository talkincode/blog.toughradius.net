<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ToughRADIUS 博客]]></title>
  <subtitle><![CDATA[服务中小微ISP，让运营变的更简单]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.toughradius.org/"/>
  <updated>2015-10-31T11:31:31.000Z</updated>
  <id>http://blog.toughradius.org/</id>
  
  <author>
    <name><![CDATA[toughradius.org]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[通过Docker镜像为ToughRADIUS部署Mysql]]></title>
    <link href="http://blog.toughradius.org/2015/10/21/docker-mysql-create/"/>
    <id>http://blog.toughradius.org/2015/10/21/docker-mysql-create/</id>
    <published>2015-10-21T15:47:26.000Z</published>
    <updated>2015-10-31T11:31:31.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS默认采用了SQLite存储数据，通常这足够运营上千的用户量了，不过当系统对数据的可管理性，系统的性能有更高的要求时，我们建议采用MySQL数据库来替换。</p>
<p>最近不少朋友反应数据库出现锁死的状况，主要是由于并发过高，SQLite采用的文件锁导致了其他数据库事务失败。</p>
<p>在ToughRADIUS发布的Docker镜像中，已经内置了MySQL的驱动，因此我们要做的仅仅是对数据库的配置。</p>
<p>强烈推荐使用Docker镜像来部署Mysql，更加简单方便。</p>
<p>最好采用主机文件映射的方式来管理数据文件，这里创建一个文件夹来存放mysql数据文件</p>
<pre><code><span class="variable">$ </span>mkdir -p /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>  </span>
</code></pre><p>创建一个Mysql容器实例并自动创建一个数据库</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-mysql
</code></pre><p>你还可以选择优化配置的Docker镜像,下面是创建一个支持4G以上内存，CPU 4核以上的配置，加上标签M4即可</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-<span class="symbol">mysql:</span><span class="constant">M4</span>
</code></pre><p>另外还提供了一个支持内存1G的配置，使用标签M1即可</p>
<pre><code><span class="variable">$ </span>docker run --name mysql -d -p <span class="number">3306</span><span class="symbol">:</span><span class="number">3306</span> \ 
    -v /home/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span> \</span>
    -e <span class="constant">MYSQL_USER</span>=tradmin \
    -e <span class="constant">MYSQL_PASSWORD</span>=trradiusd \
    -e <span class="constant">MYSQL_DATABASE</span>=toughradius \
    -e <span class="constant">MYSQL_ROOT_PASSWORD</span>=myroot talkincode/docker-<span class="symbol">mysql:</span><span class="constant">M1</span>
</code></pre><blockquote>
<p>  <code>MYSQL_ROOT_PASSWORD</code>: root用户密码<br>  <code>MYSQL_DATABASE</code>: 自动创建一个数据库<br>  <code>MYSQL_USER</code>: 随数据库创建一个用户<br>  <code>MYSQL_PASSWORD</code>: 新建用户的密码</p>
</blockquote>
<h3 id="备份数据库">备份数据库</h3><p>如果是首次安装，可略过，如果是迁移数据库，则务必进行备份。</p>
<h3 id="创建数据库">创建数据库</h3><p>通过MySQL客户端执行以下语句，请自行修改相关用户密码信息。如果已经使用Docker镜像自动创建数据库，则忽略。</p>
<pre><code><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> toughradius <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span> 
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> toughradius.* <span class="keyword">TO</span> tradmin@‘%<span class="string">' IDENTIFIED BY ‘trradiusd'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span> 
<span class="operator"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span> 
</code></pre><h3 id="配置ToughRADIUS">配置ToughRADIUS</h3><p>进入ToughRADIUS的系统管理控制台，打开数据库配置界面。设置MySQl数据库类型，并填写mysql数据库连接描述。注意数据库名称，用户名，密码对应。</p>
<pre><code><span class="label">mysql:</span>//tradmin:trradiusd<span class="localvars">@192</span><span class="number">.168</span><span class="number">.1</span><span class="number">.10</span>/toughradius?charset=utf8
</code></pre><p><img src="https://cloud.githubusercontent.com/assets/377938/10863358/b4e30a14-8005-11e5-8e06-b4ff066842d1.png" alt="mysql config"></p>
<h3 id="初始化MySQL数据库">初始化MySQL数据库</h3><p>完成创建和配置后，进入下一步的初始化过程，首先进入控制面板，重启所有服务，以保证所有服务都能加载最新配置。</p>
<p>点击初始化数据库按钮，完成数据库的初始化。</p>
<h3 id="恢复数据">恢复数据</h3><p>进入数据备份管理界面，恢复之前备份的数据，如果是首次安装则可忽略。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS默认采用了SQLite存储数据，通常这足够运营上千的用户量了，不过当系统对数据的可管理性，系统的性能有更高的要求时，我们建议采用MySQL数据库来替换。</p>
<p>最近不少朋友反应数据库出现锁死的状况，主要是由于并发过高，SQLite采用的文件锁导]]>
    </summary>
    
      <category term="docker" scheme="http://blog.toughradius.org/tags/docker/"/>
    
      <category term="mysql" scheme="http://blog.toughradius.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux PPTP 对接 ToughRADIUS]]></title>
    <link href="http://blog.toughradius.org/2015/10/19/linux-pptpd-to-toughradius/"/>
    <id>http://blog.toughradius.org/2015/10/19/linux-pptpd-to-toughradius/</id>
    <published>2015-10-19T02:25:32.000Z</published>
    <updated>2015-10-19T02:29:01.000Z</updated>
    <content type="html"><![CDATA[<p>以 ubuntu14 为例，谈谈PPTP对接ToughRADIUS</p>
<h3 id="安装pptpd服务">安装pptpd服务</h3><pre><code>sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> -y
sudo apt-<span class="built_in">get</span> install -y pptpd iptables libfreeradius-client2 libfreeradius-client-<span class="built_in">dev</span>
</code></pre><p>如果/etc/radiusclient目录不存在，建立一个radius配置目录链接 </p>
<pre><code>ln -s <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>radiusclient <span class="regexp">/etc/</span>radiusclient
</code></pre><h3 id="配置pptpd与radius">配置pptpd与radius</h3><p>修改配置文件 /etc/pptpd.conf</p>
<pre><code>option /etc/ppp/pptpd-options
<span class="hexcolor">#deb</span>ug
<span class="id">#stimeout</span> <span class="number">10</span>
logwtmp
<span class="id">#bcrelay</span> eth1
<span class="id">#delegate</span>
<span class="id">#connections</span> <span class="number">100</span>
localip <span class="number">10.79</span>.<span class="number">97.1</span>
remoteip <span class="number">10.79</span>.<span class="number">97.10</span>-<span class="number">200</span>
</code></pre><p>修改配置文件 /etc/ppp/pptpd-options，注意这里采用了maschapv2认证方式，并采用mppe128位加密模式。</p>
<pre><code>name pptpd
refuse-pap
refuse-chap
refuse-mschap
<span class="keyword">require</span>-mschap-v2
<span class="keyword">require</span>-mppe-<span class="number">128</span>

<span class="comment"># Network and Routing</span>
ms-dns <span class="number">8.8</span>.<span class="number">8.8</span>
ms-dns <span class="number">8.8</span>.<span class="number">4.4</span>
proxyarp
nodefaultroute

<span class="comment">#Logging</span>
<span class="comment">#debug</span>
<span class="comment">#dump</span>
<span class="comment">#logfile /var/log/pptpd.log</span>

<span class="comment"># Miscellaneous</span>
lock
nobsdcomp
novj
novjccomp
<span class="comment">#nologfd</span>

plugin /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">pppd</span>/2.4.5/<span class="title">radius</span>.<span class="title">so</span></span>
plugin /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">pppd</span>/2.4.5/<span class="title">radattr</span>.<span class="title">so</span></span>
radius-config-file /etc/radiusclient/radiusclient.conf
</code></pre><p>配置/etc/radiusclient/radiusclient.conf , 注意配置authserver，acctserver为你实际的radius服务器地址和端口。</p>
<pre><code>auth_order radius
login_tries <span class="number">4</span>
login_timeout <span class="number">60</span>
nologin <span class="regexp">/etc/</span>nologin
authserver radius.toughctruc.<span class="string">net:</span><span class="number">1812</span>
acctserver radius.toughctruc.<span class="string">net:</span><span class="number">1813</span>
servers <span class="regexp">/etc/</span>radiusclient/servers
dictionary <span class="regexp">/etc/</span>radiusclient/dictionary
seqfile <span class="regexp">/var/</span>run/radius.seq
mapfile <span class="regexp">/etc/</span>radiusclient/port-id-map
default_realm
radius_timeout <span class="number">10</span>
radius_retries <span class="number">3</span>
login_local <span class="regexp">/bin/</span>login
</code></pre><p>如果 /etc/radiusclient/port-id-map 不存在，建立一个空文件</p>
<pre><code><span class="title">echo</span> <span class="string">""</span> &gt; /etc/radiusclient/<span class="foreign"><span class="keyword">port</span>-id-map</span>
</code></pre><p>配置radius服务器和共享密钥 /etc/radiusclient/servers</p>
<pre><code>radius<span class="class">.toughstruct</span><span class="class">.net</span>     testing123
</code></pre><p>为了支持mschapv2认证，需要加入 dictionary.microsoft字典， 修改字典文件 /etc/radiusclient/dictionary，在末尾务必加上 ：</p>
<pre><code><span class="keyword">INCLUDE</span> <span class="regexp">/etc/</span>radiusclient<span class="regexp">/dictionary.microsoft</span>
</code></pre><p>如果目录中没有这个字典，可以下载：<a href="https://raw.githubusercontent.com/talkincode/ToughVPN/master/radius/dictionary/dictionary.microsoft" target="_blank" rel="external">https://raw.githubusercontent.com/talkincode/ToughVPN/master/radius/dictionary/dictionary.microsoft</a></p>
<h3 id="修改防火墙配置并修改内核转发支持">修改防火墙配置并修改内核转发支持</h3><p>注意IP地址与/etc/pptpd.conf中配置的一致</p>
<pre><code>iptables -t nat -A POSTROUTING -s <span class="number">10.79</span><span class="number">.97</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE
iptables -A FORWARD -s <span class="number">10.79</span><span class="number">.97</span><span class="number">.0</span>/<span class="number">24</span> -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j TCPMSS --<span class="built_in">set</span>-mss <span class="number">1356</span>
</code></pre><p>设置内核转发支持</p>
<pre><code>sysctl -w net<span class="class">.ipv4</span><span class="class">.ip_forward</span>=<span class="number">1</span>
</code></pre><p>启动pptpd服务</p>
<pre><code>service pptpd <span class="built_in">start</span> 
</code></pre><h3 id="配置ToughRADIUS">配置ToughRADIUS</h3><p>在ToughRADIUS系统中，需要把PPTP作为接入设备加入，在BAS信息管理里增加一个标准配置即可。</p>
<p>增加资费，新增用户信息，接下来就可以进行拨号测试了。</p>
<p>在拨号过程中，可以通过用户消息跟踪或系统日志查看进行调试，使用mschapv2认证时，用户消息必定会有两个特定属性：MS-CHAP-Challenge 和 MS-CHAP2-Response，如果用户消息中没有此属性，则可能的原因是：</p>
<ul>
<li>pptp服务没有配置require-mschap-v2  和 require-mppe-128</li>
<li>系统内核不支持mppe</li>
<li>没有加入dictionary.microsoft</li>
<li>如果没有上面的问题，试着修改 require-mppe-128 为 require-mppe</li>
</ul>
<h3 id="注意事项">注意事项</h3><p>要支持mschapv2，需要系统内核支持MPPE，输入指令：</p>
<pre><code>modprobe ppp-compress-<span class="number">18</span> &amp;&amp; <span class="built_in">echo</span> ok
</code></pre><p>如果输出ok，则系统内核支持。</p>
<p>在测试过程中，可以开启debug收集日志进行诊断，以及配合Radius服务器的日志进行诊断。</p>
<p>更多帮助，请参考 <a href="http://poptop.sourceforge.net/dox/" target="_blank" rel="external">http://poptop.sourceforge.net/dox/</a></p>
<p>另外，你也可以关注我们的这个开源项目：<a href="https://github.com/talkincode/ToughVPN" target="_blank" rel="external">https://github.com/talkincode/ToughVPN  </a>  ，这个项目计划实现更简单的一键安装以及常识Docker模式的部署。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以 ubuntu14 为例，谈谈PPTP对接ToughRADIUS</p>
<h3 id="安装pptpd服务">安装pptpd服务</h3><pre><code>sudo apt-<span class="built_in">get</span> <span class=]]>
    </summary>
    
      <category term="pptpd" scheme="http://blog.toughradius.org/tags/pptpd/"/>
    
      <category term="vpn" scheme="http://blog.toughradius.org/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V1.2.0.2 发布]]></title>
    <link href="http://blog.toughradius.org/2015/10/17/ver1202/"/>
    <id>http://blog.toughradius.org/2015/10/17/ver1202/</id>
    <published>2015-10-17T07:22:51.000Z</published>
    <updated>2015-10-17T07:28:14.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V1.2.0.2 发布。</p>
<h2 id="版本变更说明：">版本变更说明：</h2><ul>
<li>修复了系统创建后，用户密码认证失效，全部放行的bug。</li>
<li>修复了无法使用mschapv2认证的错误，支持mppe128位加密。</li>
<li>删除了mschapv1的支持。</li>
</ul>
<h2 id="升级指南">升级指南</h2><p>可在系统控制管理界面里直接升级稳定版，无数据库结构变动，但建议还是要备份数据。</p>
<p>如果界面升级失败，可在主机终端用以下指令升级：</p>
<pre><code>docker <span class="built_in">exec</span> trserver sh -c <span class="string">"cd /opt/toughradius &amp;&amp; git checkout stable &amp;&amp; git pull origin stable &amp;&amp; supervisorctl restart all"</span>
</code></pre><blockquote>
<p>注意 trserver是容器的名称，请该做你部署的容器名称。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V1.2.0.2 发布。</p>
<h2 id="版本变更说明：">版本变更说明：</h2><ul>
<li>修复了系统创建后，用户密码认证失效，全部放行的bug。</li>
<li>修复了无法使用mschapv2认证的错误，支持mppe128位加密]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mschapv2在Radius中的认证实现]]></title>
    <link href="http://blog.toughradius.org/2015/10/17/mschapv2/"/>
    <id>http://blog.toughradius.org/2015/10/17/mschapv2/</id>
    <published>2015-10-16T16:44:31.000Z</published>
    <updated>2015-10-16T16:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>在Radius的认证请求AccessRequest包中如果包含 MS-CHAP2-Response 和 MS-CHAP-Challenge 属性则意味着需要实现ms-chap-v2认证。</p>
<h2 id="客户端_MS-CHAP2-Response_和_MS-CHAP-Challenge_生成的规则">客户端 MS-CHAP2-Response 和 MS-CHAP-Challenge 生成的规则</h2><h3 id="MS-CHAP-Challenge">MS-CHAP-Challenge</h3><p>MS-CHAP-Challenge  (AuthChallenge) 是客户端生成的随机16字节。</p>
<h3 id="MS-CHAP2-Response">MS-CHAP2-Response</h3><p>随机生成16字节属性 PeerChallenge，连同AuthChallenge，UserName，Password作为输入参数，调用方法 GenerateNTResponse 得到 NtResponse.</p>
<pre><code><span class="function"><span class="title">GenerateNTResponse</span><span class="params">(AuthChallenge, PeerChallenge, UserName, Password)</span></span> 
</code></pre><p>GenerateNTResponse 方法的实现参考 <a href="http://tools.ietf.org/html/rfc2759.html#section-8.1" target="_blank" rel="external">http://tools.ietf.org/html/rfc2759.html#section-8.1</a></p>
<p>封装50字节的 MS-CHAP2-Response 属性：</p>
<pre><code><span class="special">[</span>0 : 2<span class="special">]</span>           Flags  <span class="command">\x</span>00<span class="command">\x</span>00
<span class="special">[</span>2 : 18<span class="special">]</span>          PeerChallenge 
<span class="special">[</span>18 : 26<span class="special">]</span>         Reserved <span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00
<span class="special">[</span>26 : 50<span class="special">]</span>         NtResponse
</code></pre><h2 id="服务端认证规则">服务端认证规则</h2><p>校验 MS-CHAP2-Response 长度，长度不等于50应该丢弃，并发送拒绝认证。</p>
<p>从 MS-CHAP2-Response 提取 PeerChallenge，NtResponse</p>
<pre><code>NtResponse = MS-CHAP2-Response[<span class="number">26</span> : <span class="number">50</span>]
PeerChallenge = MS-CHAP2-Response[<span class="number">2</span> : <span class="number">18</span>]
</code></pre><p>调用 GenerateNTResponse 方法得到 MyNtResponse</p>
<pre><code><span class="function"><span class="title">GenerateNTResponse</span><span class="params">(AuthChallenge, PeerChallenge, UserName, Password)</span></span>  
</code></pre><p>比较 MyNtResponse 与 NtResponse，不相等则验证失败。</p>
<h2 id="Radius_认证响应">Radius 认证响应</h2><p>调用 GenerateAuthenticatorResponse 方法得到 AuthenticatorResponse</p>
<pre><code>GenerateAuthenticatorResponse<span class="list">(
    <span class="keyword">Password</span>,
    NtResponse,
    PeerChallenge, 
    AuthChallenge
    UserName
)</span> 
</code></pre><p>GenerateAuthenticatorResponse 方法的实现参考 <a href="http://tools.ietf.org/html/rfc2759.html#section-8.7" target="_blank" rel="external">http://tools.ietf.org/html/rfc2759.html#section-8.7</a></p>
<p>设置Radius响应消息属性  MS-CHAP2-Success  =  AuthenticatorResponse</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Radius的认证请求AccessRequest包中如果包含 MS-CHAP2-Response 和 MS-CHAP-Challenge 属性则意味着需要实现ms-chap-v2认证。</p>
<h2 id="客户端_MS-CHAP2-Response_和_MS-CHAP]]>
    </summary>
    
      <category term="radius" scheme="http://blog.toughradius.org/tags/radius/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToughRADIUS V1.2.0.1 发布]]></title>
    <link href="http://blog.toughradius.org/2015/10/13/ver1201/"/>
    <id>http://blog.toughradius.org/2015/10/13/ver1201/</id>
    <published>2015-10-13T06:54:34.000Z</published>
    <updated>2015-10-15T06:58:01.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS V1.2.0.1 发布，该版本没有数据库部分升级，在ToughRADIUS的控制面板，选择升级稳定版就可以切换了。</p>
<h1 id="版本变更说明：">版本变更说明：</h1><ul>
<li>不再发布为Python标准安装包，ToughRADIUS在发布上将主要采用Docker镜像打包模式，这让我们更专注的解决问题，而不是制造各种问题。</li>
<li>在发送强制下线消息时有一个打印日志的BUG被修复。</li>
<li>清理了一些无用的逻辑代码。</li>
<li>用户状态的改进，查询时根据用户过期日期查询，在显示时做额外的判断，修正了用户已过期还显示为正常的错误。</li>
<li>充值卡续费的BUG修复。</li>
<li>发送邮件模块的BUG修复。</li>
<li>操作员cookie过期导致退出链接出错的BUG修复。</li>
<li>更新Dockerfile构建脚本。</li>
</ul>
<p>感谢大家一如既往的支持，有问题请及时反馈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS V1.2.0.1 发布，该版本没有数据库部分升级，在ToughRADIUS的控制面板，选择升级稳定版就可以切换了。</p>
<h1 id="版本变更说明：">版本变更说明：</h1><ul>
<li>不再发布为Python标准安装包，ToughRAD]]>
    </summary>
    
      <category term="release" scheme="http://blog.toughradius.org/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务中小微ISP，让运营变的更简单。]]></title>
    <link href="http://blog.toughradius.org/2015/10/07/intro/"/>
    <id>http://blog.toughradius.org/2015/10/07/intro/</id>
    <published>2015-10-07T07:59:45.000Z</published>
    <updated>2015-10-07T08:28:38.000Z</updated>
    <content type="html"><![CDATA[<p>ToughRADIUS是一个AAA应用软件，从创立之日起，他的宗旨就是服务于中小微ISP，让运营变得更简单。</p>
<p>ToughRADIUS支持标准RADIUS协议（RFC 2865, RFC 2866），提供完整的AAA实现。支持灵活的策略管理，支持各种主流接入设备并轻松扩展，具备丰富的计费策略支持。 </p>
<p>ToughRADIUS支持使用Oracle, MySQL, PostgreSQL, MSSQL等主流数据库存储用户数据，支持数据缓存，提供高性能的支持。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ToughRADIUS是一个AAA应用软件，从创立之日起，他的宗旨就是服务于中小微ISP，让运营变得更简单。</p>
<p>ToughRADIUS支持标准RADIUS协议（RFC 2865, RFC 2866），提供完整的AAA实现。支持灵活的策略管理，支持各种主流接入设备]]>
    </summary>
    
  </entry>
  
</feed>
